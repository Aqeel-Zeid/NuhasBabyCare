module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.7). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCardTemplate {
  count: Int!
}

type AggregateDepartment {
  count: Int!
}

type AggregatePosition {
  count: Int!
}

type AggregateStaffMember {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type CardTemplate {
  CardId: ID!
  CardName: String
  Category: String
  Price: Float
  Size: String
  Material: String
  SearchTags: String
}

type CardTemplateConnection {
  pageInfo: PageInfo!
  edges: [CardTemplateEdge]!
  aggregate: AggregateCardTemplate!
}

input CardTemplateCreateInput {
  CardId: ID
  CardName: String
  Category: String
  Price: Float
  Size: String
  Material: String
  SearchTags: String
}

type CardTemplateEdge {
  node: CardTemplate!
  cursor: String!
}

enum CardTemplateOrderByInput {
  CardId_ASC
  CardId_DESC
  CardName_ASC
  CardName_DESC
  Category_ASC
  Category_DESC
  Price_ASC
  Price_DESC
  Size_ASC
  Size_DESC
  Material_ASC
  Material_DESC
  SearchTags_ASC
  SearchTags_DESC
}

type CardTemplatePreviousValues {
  CardId: ID!
  CardName: String
  Category: String
  Price: Float
  Size: String
  Material: String
  SearchTags: String
}

type CardTemplateSubscriptionPayload {
  mutation: MutationType!
  node: CardTemplate
  updatedFields: [String!]
  previousValues: CardTemplatePreviousValues
}

input CardTemplateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CardTemplateWhereInput
  AND: [CardTemplateSubscriptionWhereInput!]
  OR: [CardTemplateSubscriptionWhereInput!]
  NOT: [CardTemplateSubscriptionWhereInput!]
}

input CardTemplateUpdateInput {
  CardName: String
  Category: String
  Price: Float
  Size: String
  Material: String
  SearchTags: String
}

input CardTemplateUpdateManyMutationInput {
  CardName: String
  Category: String
  Price: Float
  Size: String
  Material: String
  SearchTags: String
}

input CardTemplateWhereInput {
  CardId: ID
  CardId_not: ID
  CardId_in: [ID!]
  CardId_not_in: [ID!]
  CardId_lt: ID
  CardId_lte: ID
  CardId_gt: ID
  CardId_gte: ID
  CardId_contains: ID
  CardId_not_contains: ID
  CardId_starts_with: ID
  CardId_not_starts_with: ID
  CardId_ends_with: ID
  CardId_not_ends_with: ID
  CardName: String
  CardName_not: String
  CardName_in: [String!]
  CardName_not_in: [String!]
  CardName_lt: String
  CardName_lte: String
  CardName_gt: String
  CardName_gte: String
  CardName_contains: String
  CardName_not_contains: String
  CardName_starts_with: String
  CardName_not_starts_with: String
  CardName_ends_with: String
  CardName_not_ends_with: String
  Category: String
  Category_not: String
  Category_in: [String!]
  Category_not_in: [String!]
  Category_lt: String
  Category_lte: String
  Category_gt: String
  Category_gte: String
  Category_contains: String
  Category_not_contains: String
  Category_starts_with: String
  Category_not_starts_with: String
  Category_ends_with: String
  Category_not_ends_with: String
  Price: Float
  Price_not: Float
  Price_in: [Float!]
  Price_not_in: [Float!]
  Price_lt: Float
  Price_lte: Float
  Price_gt: Float
  Price_gte: Float
  Size: String
  Size_not: String
  Size_in: [String!]
  Size_not_in: [String!]
  Size_lt: String
  Size_lte: String
  Size_gt: String
  Size_gte: String
  Size_contains: String
  Size_not_contains: String
  Size_starts_with: String
  Size_not_starts_with: String
  Size_ends_with: String
  Size_not_ends_with: String
  Material: String
  Material_not: String
  Material_in: [String!]
  Material_not_in: [String!]
  Material_lt: String
  Material_lte: String
  Material_gt: String
  Material_gte: String
  Material_contains: String
  Material_not_contains: String
  Material_starts_with: String
  Material_not_starts_with: String
  Material_ends_with: String
  Material_not_ends_with: String
  SearchTags: String
  SearchTags_not: String
  SearchTags_in: [String!]
  SearchTags_not_in: [String!]
  SearchTags_lt: String
  SearchTags_lte: String
  SearchTags_gt: String
  SearchTags_gte: String
  SearchTags_contains: String
  SearchTags_not_contains: String
  SearchTags_starts_with: String
  SearchTags_not_starts_with: String
  SearchTags_ends_with: String
  SearchTags_not_ends_with: String
  AND: [CardTemplateWhereInput!]
  OR: [CardTemplateWhereInput!]
  NOT: [CardTemplateWhereInput!]
}

input CardTemplateWhereUniqueInput {
  CardId: ID
  CardName: String
}

type Department {
  departmentID: ID!
  name: String!
}

type DepartmentConnection {
  pageInfo: PageInfo!
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  departmentID: ID
  name: String!
}

input DepartmentCreateOneInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
}

type DepartmentEdge {
  node: Department!
  cursor: String!
}

enum DepartmentOrderByInput {
  departmentID_ASC
  departmentID_DESC
  name_ASC
  name_DESC
}

type DepartmentPreviousValues {
  departmentID: ID!
  name: String!
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
  AND: [DepartmentSubscriptionWhereInput!]
  OR: [DepartmentSubscriptionWhereInput!]
  NOT: [DepartmentSubscriptionWhereInput!]
}

input DepartmentUpdateDataInput {
  name: String
}

input DepartmentUpdateInput {
  name: String
}

input DepartmentUpdateManyMutationInput {
  name: String
}

input DepartmentUpdateOneRequiredInput {
  create: DepartmentCreateInput
  update: DepartmentUpdateDataInput
  upsert: DepartmentUpsertNestedInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentUpsertNestedInput {
  update: DepartmentUpdateDataInput!
  create: DepartmentCreateInput!
}

input DepartmentWhereInput {
  departmentID: ID
  departmentID_not: ID
  departmentID_in: [ID!]
  departmentID_not_in: [ID!]
  departmentID_lt: ID
  departmentID_lte: ID
  departmentID_gt: ID
  departmentID_gte: ID
  departmentID_contains: ID
  departmentID_not_contains: ID
  departmentID_starts_with: ID
  departmentID_not_starts_with: ID
  departmentID_ends_with: ID
  departmentID_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
}

input DepartmentWhereUniqueInput {
  departmentID: ID
  name: String
}

scalar Long

type Mutation {
  createCardTemplate(data: CardTemplateCreateInput!): CardTemplate!
  updateCardTemplate(data: CardTemplateUpdateInput!, where: CardTemplateWhereUniqueInput!): CardTemplate
  updateManyCardTemplates(data: CardTemplateUpdateManyMutationInput!, where: CardTemplateWhereInput): BatchPayload!
  upsertCardTemplate(where: CardTemplateWhereUniqueInput!, create: CardTemplateCreateInput!, update: CardTemplateUpdateInput!): CardTemplate!
  deleteCardTemplate(where: CardTemplateWhereUniqueInput!): CardTemplate
  deleteManyCardTemplates(where: CardTemplateWhereInput): BatchPayload!
  createDepartment(data: DepartmentCreateInput!): Department!
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateManyDepartments(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): BatchPayload!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  createPosition(data: PositionCreateInput!): Position!
  updatePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position
  updateManyPositions(data: PositionUpdateManyMutationInput!, where: PositionWhereInput): BatchPayload!
  upsertPosition(where: PositionWhereUniqueInput!, create: PositionCreateInput!, update: PositionUpdateInput!): Position!
  deletePosition(where: PositionWhereUniqueInput!): Position
  deleteManyPositions(where: PositionWhereInput): BatchPayload!
  createStaffMember(data: StaffMemberCreateInput!): StaffMember!
  updateStaffMember(data: StaffMemberUpdateInput!, where: StaffMemberWhereUniqueInput!): StaffMember
  updateManyStaffMembers(data: StaffMemberUpdateManyMutationInput!, where: StaffMemberWhereInput): BatchPayload!
  upsertStaffMember(where: StaffMemberWhereUniqueInput!, create: StaffMemberCreateInput!, update: StaffMemberUpdateInput!): StaffMember!
  deleteStaffMember(where: StaffMemberWhereUniqueInput!): StaffMember
  deleteManyStaffMembers(where: StaffMemberWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Position {
  positionId: ID!
  department: Department!
  basicSalary: Float
  otRate: Float
  jobRole: String
  contractBasis: Boolean
  PerContractPrice: Float
}

type PositionConnection {
  pageInfo: PageInfo!
  edges: [PositionEdge]!
  aggregate: AggregatePosition!
}

input PositionCreateInput {
  positionId: ID
  department: DepartmentCreateOneInput!
  basicSalary: Float
  otRate: Float
  jobRole: String
  contractBasis: Boolean
  PerContractPrice: Float
}

input PositionCreateOneInput {
  create: PositionCreateInput
  connect: PositionWhereUniqueInput
}

type PositionEdge {
  node: Position!
  cursor: String!
}

enum PositionOrderByInput {
  positionId_ASC
  positionId_DESC
  basicSalary_ASC
  basicSalary_DESC
  otRate_ASC
  otRate_DESC
  jobRole_ASC
  jobRole_DESC
  contractBasis_ASC
  contractBasis_DESC
  PerContractPrice_ASC
  PerContractPrice_DESC
}

type PositionPreviousValues {
  positionId: ID!
  basicSalary: Float
  otRate: Float
  jobRole: String
  contractBasis: Boolean
  PerContractPrice: Float
}

type PositionSubscriptionPayload {
  mutation: MutationType!
  node: Position
  updatedFields: [String!]
  previousValues: PositionPreviousValues
}

input PositionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PositionWhereInput
  AND: [PositionSubscriptionWhereInput!]
  OR: [PositionSubscriptionWhereInput!]
  NOT: [PositionSubscriptionWhereInput!]
}

input PositionUpdateDataInput {
  department: DepartmentUpdateOneRequiredInput
  basicSalary: Float
  otRate: Float
  jobRole: String
  contractBasis: Boolean
  PerContractPrice: Float
}

input PositionUpdateInput {
  department: DepartmentUpdateOneRequiredInput
  basicSalary: Float
  otRate: Float
  jobRole: String
  contractBasis: Boolean
  PerContractPrice: Float
}

input PositionUpdateManyMutationInput {
  basicSalary: Float
  otRate: Float
  jobRole: String
  contractBasis: Boolean
  PerContractPrice: Float
}

input PositionUpdateOneInput {
  create: PositionCreateInput
  update: PositionUpdateDataInput
  upsert: PositionUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PositionWhereUniqueInput
}

input PositionUpsertNestedInput {
  update: PositionUpdateDataInput!
  create: PositionCreateInput!
}

input PositionWhereInput {
  positionId: ID
  positionId_not: ID
  positionId_in: [ID!]
  positionId_not_in: [ID!]
  positionId_lt: ID
  positionId_lte: ID
  positionId_gt: ID
  positionId_gte: ID
  positionId_contains: ID
  positionId_not_contains: ID
  positionId_starts_with: ID
  positionId_not_starts_with: ID
  positionId_ends_with: ID
  positionId_not_ends_with: ID
  department: DepartmentWhereInput
  basicSalary: Float
  basicSalary_not: Float
  basicSalary_in: [Float!]
  basicSalary_not_in: [Float!]
  basicSalary_lt: Float
  basicSalary_lte: Float
  basicSalary_gt: Float
  basicSalary_gte: Float
  otRate: Float
  otRate_not: Float
  otRate_in: [Float!]
  otRate_not_in: [Float!]
  otRate_lt: Float
  otRate_lte: Float
  otRate_gt: Float
  otRate_gte: Float
  jobRole: String
  jobRole_not: String
  jobRole_in: [String!]
  jobRole_not_in: [String!]
  jobRole_lt: String
  jobRole_lte: String
  jobRole_gt: String
  jobRole_gte: String
  jobRole_contains: String
  jobRole_not_contains: String
  jobRole_starts_with: String
  jobRole_not_starts_with: String
  jobRole_ends_with: String
  jobRole_not_ends_with: String
  contractBasis: Boolean
  contractBasis_not: Boolean
  PerContractPrice: Float
  PerContractPrice_not: Float
  PerContractPrice_in: [Float!]
  PerContractPrice_not_in: [Float!]
  PerContractPrice_lt: Float
  PerContractPrice_lte: Float
  PerContractPrice_gt: Float
  PerContractPrice_gte: Float
  AND: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
}

input PositionWhereUniqueInput {
  positionId: ID
}

type Query {
  cardTemplate(where: CardTemplateWhereUniqueInput!): CardTemplate
  cardTemplates(where: CardTemplateWhereInput, orderBy: CardTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CardTemplate]!
  cardTemplatesConnection(where: CardTemplateWhereInput, orderBy: CardTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardTemplateConnection!
  department(where: DepartmentWhereUniqueInput!): Department
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  position(where: PositionWhereUniqueInput!): Position
  positions(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Position]!
  positionsConnection(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PositionConnection!
  staffMember(where: StaffMemberWhereUniqueInput!): StaffMember
  staffMembers(where: StaffMemberWhereInput, orderBy: StaffMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StaffMember]!
  staffMembersConnection(where: StaffMemberWhereInput, orderBy: StaffMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StaffMemberConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type StaffMember {
  EmployeeId: ID!
  EmployeeName: String
  Nic: String
  BancAccountNumber: String
  Position: Position
  Address: String
  PhoneNumber: String
  HomeNumber: String
  WorkEmail: String
  Password: String
}

type StaffMemberConnection {
  pageInfo: PageInfo!
  edges: [StaffMemberEdge]!
  aggregate: AggregateStaffMember!
}

input StaffMemberCreateInput {
  EmployeeId: ID
  EmployeeName: String
  Nic: String
  BancAccountNumber: String
  Position: PositionCreateOneInput
  Address: String
  PhoneNumber: String
  HomeNumber: String
  WorkEmail: String
  Password: String
}

type StaffMemberEdge {
  node: StaffMember!
  cursor: String!
}

enum StaffMemberOrderByInput {
  EmployeeId_ASC
  EmployeeId_DESC
  EmployeeName_ASC
  EmployeeName_DESC
  Nic_ASC
  Nic_DESC
  BancAccountNumber_ASC
  BancAccountNumber_DESC
  Address_ASC
  Address_DESC
  PhoneNumber_ASC
  PhoneNumber_DESC
  HomeNumber_ASC
  HomeNumber_DESC
  WorkEmail_ASC
  WorkEmail_DESC
  Password_ASC
  Password_DESC
}

type StaffMemberPreviousValues {
  EmployeeId: ID!
  EmployeeName: String
  Nic: String
  BancAccountNumber: String
  Address: String
  PhoneNumber: String
  HomeNumber: String
  WorkEmail: String
  Password: String
}

type StaffMemberSubscriptionPayload {
  mutation: MutationType!
  node: StaffMember
  updatedFields: [String!]
  previousValues: StaffMemberPreviousValues
}

input StaffMemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StaffMemberWhereInput
  AND: [StaffMemberSubscriptionWhereInput!]
  OR: [StaffMemberSubscriptionWhereInput!]
  NOT: [StaffMemberSubscriptionWhereInput!]
}

input StaffMemberUpdateInput {
  EmployeeName: String
  Nic: String
  BancAccountNumber: String
  Position: PositionUpdateOneInput
  Address: String
  PhoneNumber: String
  HomeNumber: String
  WorkEmail: String
  Password: String
}

input StaffMemberUpdateManyMutationInput {
  EmployeeName: String
  Nic: String
  BancAccountNumber: String
  Address: String
  PhoneNumber: String
  HomeNumber: String
  WorkEmail: String
  Password: String
}

input StaffMemberWhereInput {
  EmployeeId: ID
  EmployeeId_not: ID
  EmployeeId_in: [ID!]
  EmployeeId_not_in: [ID!]
  EmployeeId_lt: ID
  EmployeeId_lte: ID
  EmployeeId_gt: ID
  EmployeeId_gte: ID
  EmployeeId_contains: ID
  EmployeeId_not_contains: ID
  EmployeeId_starts_with: ID
  EmployeeId_not_starts_with: ID
  EmployeeId_ends_with: ID
  EmployeeId_not_ends_with: ID
  EmployeeName: String
  EmployeeName_not: String
  EmployeeName_in: [String!]
  EmployeeName_not_in: [String!]
  EmployeeName_lt: String
  EmployeeName_lte: String
  EmployeeName_gt: String
  EmployeeName_gte: String
  EmployeeName_contains: String
  EmployeeName_not_contains: String
  EmployeeName_starts_with: String
  EmployeeName_not_starts_with: String
  EmployeeName_ends_with: String
  EmployeeName_not_ends_with: String
  Nic: String
  Nic_not: String
  Nic_in: [String!]
  Nic_not_in: [String!]
  Nic_lt: String
  Nic_lte: String
  Nic_gt: String
  Nic_gte: String
  Nic_contains: String
  Nic_not_contains: String
  Nic_starts_with: String
  Nic_not_starts_with: String
  Nic_ends_with: String
  Nic_not_ends_with: String
  BancAccountNumber: String
  BancAccountNumber_not: String
  BancAccountNumber_in: [String!]
  BancAccountNumber_not_in: [String!]
  BancAccountNumber_lt: String
  BancAccountNumber_lte: String
  BancAccountNumber_gt: String
  BancAccountNumber_gte: String
  BancAccountNumber_contains: String
  BancAccountNumber_not_contains: String
  BancAccountNumber_starts_with: String
  BancAccountNumber_not_starts_with: String
  BancAccountNumber_ends_with: String
  BancAccountNumber_not_ends_with: String
  Position: PositionWhereInput
  Address: String
  Address_not: String
  Address_in: [String!]
  Address_not_in: [String!]
  Address_lt: String
  Address_lte: String
  Address_gt: String
  Address_gte: String
  Address_contains: String
  Address_not_contains: String
  Address_starts_with: String
  Address_not_starts_with: String
  Address_ends_with: String
  Address_not_ends_with: String
  PhoneNumber: String
  PhoneNumber_not: String
  PhoneNumber_in: [String!]
  PhoneNumber_not_in: [String!]
  PhoneNumber_lt: String
  PhoneNumber_lte: String
  PhoneNumber_gt: String
  PhoneNumber_gte: String
  PhoneNumber_contains: String
  PhoneNumber_not_contains: String
  PhoneNumber_starts_with: String
  PhoneNumber_not_starts_with: String
  PhoneNumber_ends_with: String
  PhoneNumber_not_ends_with: String
  HomeNumber: String
  HomeNumber_not: String
  HomeNumber_in: [String!]
  HomeNumber_not_in: [String!]
  HomeNumber_lt: String
  HomeNumber_lte: String
  HomeNumber_gt: String
  HomeNumber_gte: String
  HomeNumber_contains: String
  HomeNumber_not_contains: String
  HomeNumber_starts_with: String
  HomeNumber_not_starts_with: String
  HomeNumber_ends_with: String
  HomeNumber_not_ends_with: String
  WorkEmail: String
  WorkEmail_not: String
  WorkEmail_in: [String!]
  WorkEmail_not_in: [String!]
  WorkEmail_lt: String
  WorkEmail_lte: String
  WorkEmail_gt: String
  WorkEmail_gte: String
  WorkEmail_contains: String
  WorkEmail_not_contains: String
  WorkEmail_starts_with: String
  WorkEmail_not_starts_with: String
  WorkEmail_ends_with: String
  WorkEmail_not_ends_with: String
  Password: String
  Password_not: String
  Password_in: [String!]
  Password_not_in: [String!]
  Password_lt: String
  Password_lte: String
  Password_gt: String
  Password_gte: String
  Password_contains: String
  Password_not_contains: String
  Password_starts_with: String
  Password_not_starts_with: String
  Password_ends_with: String
  Password_not_ends_with: String
  AND: [StaffMemberWhereInput!]
  OR: [StaffMemberWhereInput!]
  NOT: [StaffMemberWhereInput!]
}

input StaffMemberWhereUniqueInput {
  EmployeeId: ID
  Nic: String
  WorkEmail: String
}

type Subscription {
  cardTemplate(where: CardTemplateSubscriptionWhereInput): CardTemplateSubscriptionPayload
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  position(where: PositionSubscriptionWhereInput): PositionSubscriptionPayload
  staffMember(where: StaffMemberSubscriptionWhereInput): StaffMemberSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  reset: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  reset: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  reset_ASC
  reset_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  reset: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  reset: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  reset: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  reset: String
  reset_not: String
  reset_in: [String!]
  reset_not_in: [String!]
  reset_lt: String
  reset_lte: String
  reset_gt: String
  reset_gte: String
  reset_contains: String
  reset_not_contains: String
  reset_starts_with: String
  reset_not_starts_with: String
  reset_ends_with: String
  reset_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    