// Code generated by Prisma (prisma@1.34.7). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  cardTemplate: (where?: CardTemplateWhereInput) => Promise<boolean>;
  department: (where?: DepartmentWhereInput) => Promise<boolean>;
  position: (where?: PositionWhereInput) => Promise<boolean>;
  staffMember: (where?: StaffMemberWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cardTemplate: (
    where: CardTemplateWhereUniqueInput
  ) => CardTemplateNullablePromise;
  cardTemplates: (args?: {
    where?: CardTemplateWhereInput;
    orderBy?: CardTemplateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CardTemplate>;
  cardTemplatesConnection: (args?: {
    where?: CardTemplateWhereInput;
    orderBy?: CardTemplateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CardTemplateConnectionPromise;
  department: (where: DepartmentWhereUniqueInput) => DepartmentNullablePromise;
  departments: (args?: {
    where?: DepartmentWhereInput;
    orderBy?: DepartmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Department>;
  departmentsConnection: (args?: {
    where?: DepartmentWhereInput;
    orderBy?: DepartmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DepartmentConnectionPromise;
  position: (where: PositionWhereUniqueInput) => PositionNullablePromise;
  positions: (args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Position>;
  positionsConnection: (args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PositionConnectionPromise;
  staffMember: (
    where: StaffMemberWhereUniqueInput
  ) => StaffMemberNullablePromise;
  staffMembers: (args?: {
    where?: StaffMemberWhereInput;
    orderBy?: StaffMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<StaffMember>;
  staffMembersConnection: (args?: {
    where?: StaffMemberWhereInput;
    orderBy?: StaffMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StaffMemberConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCardTemplate: (data: CardTemplateCreateInput) => CardTemplatePromise;
  updateCardTemplate: (args: {
    data: CardTemplateUpdateInput;
    where: CardTemplateWhereUniqueInput;
  }) => CardTemplatePromise;
  updateManyCardTemplates: (args: {
    data: CardTemplateUpdateManyMutationInput;
    where?: CardTemplateWhereInput;
  }) => BatchPayloadPromise;
  upsertCardTemplate: (args: {
    where: CardTemplateWhereUniqueInput;
    create: CardTemplateCreateInput;
    update: CardTemplateUpdateInput;
  }) => CardTemplatePromise;
  deleteCardTemplate: (
    where: CardTemplateWhereUniqueInput
  ) => CardTemplatePromise;
  deleteManyCardTemplates: (
    where?: CardTemplateWhereInput
  ) => BatchPayloadPromise;
  createDepartment: (data: DepartmentCreateInput) => DepartmentPromise;
  updateDepartment: (args: {
    data: DepartmentUpdateInput;
    where: DepartmentWhereUniqueInput;
  }) => DepartmentPromise;
  updateManyDepartments: (args: {
    data: DepartmentUpdateManyMutationInput;
    where?: DepartmentWhereInput;
  }) => BatchPayloadPromise;
  upsertDepartment: (args: {
    where: DepartmentWhereUniqueInput;
    create: DepartmentCreateInput;
    update: DepartmentUpdateInput;
  }) => DepartmentPromise;
  deleteDepartment: (where: DepartmentWhereUniqueInput) => DepartmentPromise;
  deleteManyDepartments: (where?: DepartmentWhereInput) => BatchPayloadPromise;
  createPosition: (data: PositionCreateInput) => PositionPromise;
  updatePosition: (args: {
    data: PositionUpdateInput;
    where: PositionWhereUniqueInput;
  }) => PositionPromise;
  updateManyPositions: (args: {
    data: PositionUpdateManyMutationInput;
    where?: PositionWhereInput;
  }) => BatchPayloadPromise;
  upsertPosition: (args: {
    where: PositionWhereUniqueInput;
    create: PositionCreateInput;
    update: PositionUpdateInput;
  }) => PositionPromise;
  deletePosition: (where: PositionWhereUniqueInput) => PositionPromise;
  deleteManyPositions: (where?: PositionWhereInput) => BatchPayloadPromise;
  createStaffMember: (data: StaffMemberCreateInput) => StaffMemberPromise;
  updateStaffMember: (args: {
    data: StaffMemberUpdateInput;
    where: StaffMemberWhereUniqueInput;
  }) => StaffMemberPromise;
  updateManyStaffMembers: (args: {
    data: StaffMemberUpdateManyMutationInput;
    where?: StaffMemberWhereInput;
  }) => BatchPayloadPromise;
  upsertStaffMember: (args: {
    where: StaffMemberWhereUniqueInput;
    create: StaffMemberCreateInput;
    update: StaffMemberUpdateInput;
  }) => StaffMemberPromise;
  deleteStaffMember: (where: StaffMemberWhereUniqueInput) => StaffMemberPromise;
  deleteManyStaffMembers: (
    where?: StaffMemberWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cardTemplate: (
    where?: CardTemplateSubscriptionWhereInput
  ) => CardTemplateSubscriptionPayloadSubscription;
  department: (
    where?: DepartmentSubscriptionWhereInput
  ) => DepartmentSubscriptionPayloadSubscription;
  position: (
    where?: PositionSubscriptionWhereInput
  ) => PositionSubscriptionPayloadSubscription;
  staffMember: (
    where?: StaffMemberSubscriptionWhereInput
  ) => StaffMemberSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CardTemplateOrderByInput =
  | "CardId_ASC"
  | "CardId_DESC"
  | "CardName_ASC"
  | "CardName_DESC"
  | "Category_ASC"
  | "Category_DESC"
  | "Price_ASC"
  | "Price_DESC"
  | "Size_ASC"
  | "Size_DESC"
  | "Material_ASC"
  | "Material_DESC"
  | "SearchTags_ASC"
  | "SearchTags_DESC";

export type DepartmentOrderByInput =
  | "departmentID_ASC"
  | "departmentID_DESC"
  | "name_ASC"
  | "name_DESC";

export type StaffMemberOrderByInput =
  | "EmployeeId_ASC"
  | "EmployeeId_DESC"
  | "EmployeeName_ASC"
  | "EmployeeName_DESC"
  | "Nic_ASC"
  | "Nic_DESC"
  | "BancAccountNumber_ASC"
  | "BancAccountNumber_DESC"
  | "Address_ASC"
  | "Address_DESC"
  | "PhoneNumber_ASC"
  | "PhoneNumber_DESC"
  | "HomeNumber_ASC"
  | "HomeNumber_DESC"
  | "WorkEmail_ASC"
  | "WorkEmail_DESC"
  | "Password_ASC"
  | "Password_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "reset_ASC"
  | "reset_DESC";

export type PositionOrderByInput =
  | "positionId_ASC"
  | "positionId_DESC"
  | "basicSalary_ASC"
  | "basicSalary_DESC"
  | "otRate_ASC"
  | "otRate_DESC"
  | "jobRole_ASC"
  | "jobRole_DESC"
  | "contractBasis_ASC"
  | "contractBasis_DESC"
  | "PerContractPrice_ASC"
  | "PerContractPrice_DESC";

export interface CardTemplateUpdateManyMutationInput {
  CardName?: Maybe<String>;
  Category?: Maybe<String>;
  Price?: Maybe<Float>;
  Size?: Maybe<String>;
  Material?: Maybe<String>;
  SearchTags?: Maybe<String>;
}

export interface PositionUpdateManyMutationInput {
  basicSalary?: Maybe<Float>;
  otRate?: Maybe<Float>;
  jobRole?: Maybe<String>;
  contractBasis?: Maybe<Boolean>;
  PerContractPrice?: Maybe<Float>;
}

export type CardTemplateWhereUniqueInput = AtLeastOne<{
  CardId: Maybe<ID_Input>;
  CardName?: Maybe<String>;
}>;

export type StaffMemberWhereUniqueInput = AtLeastOne<{
  EmployeeId: Maybe<ID_Input>;
  Nic?: Maybe<String>;
  WorkEmail?: Maybe<String>;
}>;

export interface DepartmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DepartmentWhereInput>;
  AND?: Maybe<
    DepartmentSubscriptionWhereInput[] | DepartmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    DepartmentSubscriptionWhereInput[] | DepartmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    DepartmentSubscriptionWhereInput[] | DepartmentSubscriptionWhereInput
  >;
}

export interface DepartmentUpsertNestedInput {
  update: DepartmentUpdateDataInput;
  create: DepartmentCreateInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  reset?: Maybe<String>;
}

export interface StaffMemberWhereInput {
  EmployeeId?: Maybe<ID_Input>;
  EmployeeId_not?: Maybe<ID_Input>;
  EmployeeId_in?: Maybe<ID_Input[] | ID_Input>;
  EmployeeId_not_in?: Maybe<ID_Input[] | ID_Input>;
  EmployeeId_lt?: Maybe<ID_Input>;
  EmployeeId_lte?: Maybe<ID_Input>;
  EmployeeId_gt?: Maybe<ID_Input>;
  EmployeeId_gte?: Maybe<ID_Input>;
  EmployeeId_contains?: Maybe<ID_Input>;
  EmployeeId_not_contains?: Maybe<ID_Input>;
  EmployeeId_starts_with?: Maybe<ID_Input>;
  EmployeeId_not_starts_with?: Maybe<ID_Input>;
  EmployeeId_ends_with?: Maybe<ID_Input>;
  EmployeeId_not_ends_with?: Maybe<ID_Input>;
  EmployeeName?: Maybe<String>;
  EmployeeName_not?: Maybe<String>;
  EmployeeName_in?: Maybe<String[] | String>;
  EmployeeName_not_in?: Maybe<String[] | String>;
  EmployeeName_lt?: Maybe<String>;
  EmployeeName_lte?: Maybe<String>;
  EmployeeName_gt?: Maybe<String>;
  EmployeeName_gte?: Maybe<String>;
  EmployeeName_contains?: Maybe<String>;
  EmployeeName_not_contains?: Maybe<String>;
  EmployeeName_starts_with?: Maybe<String>;
  EmployeeName_not_starts_with?: Maybe<String>;
  EmployeeName_ends_with?: Maybe<String>;
  EmployeeName_not_ends_with?: Maybe<String>;
  Nic?: Maybe<String>;
  Nic_not?: Maybe<String>;
  Nic_in?: Maybe<String[] | String>;
  Nic_not_in?: Maybe<String[] | String>;
  Nic_lt?: Maybe<String>;
  Nic_lte?: Maybe<String>;
  Nic_gt?: Maybe<String>;
  Nic_gte?: Maybe<String>;
  Nic_contains?: Maybe<String>;
  Nic_not_contains?: Maybe<String>;
  Nic_starts_with?: Maybe<String>;
  Nic_not_starts_with?: Maybe<String>;
  Nic_ends_with?: Maybe<String>;
  Nic_not_ends_with?: Maybe<String>;
  BancAccountNumber?: Maybe<String>;
  BancAccountNumber_not?: Maybe<String>;
  BancAccountNumber_in?: Maybe<String[] | String>;
  BancAccountNumber_not_in?: Maybe<String[] | String>;
  BancAccountNumber_lt?: Maybe<String>;
  BancAccountNumber_lte?: Maybe<String>;
  BancAccountNumber_gt?: Maybe<String>;
  BancAccountNumber_gte?: Maybe<String>;
  BancAccountNumber_contains?: Maybe<String>;
  BancAccountNumber_not_contains?: Maybe<String>;
  BancAccountNumber_starts_with?: Maybe<String>;
  BancAccountNumber_not_starts_with?: Maybe<String>;
  BancAccountNumber_ends_with?: Maybe<String>;
  BancAccountNumber_not_ends_with?: Maybe<String>;
  Position?: Maybe<PositionWhereInput>;
  Address?: Maybe<String>;
  Address_not?: Maybe<String>;
  Address_in?: Maybe<String[] | String>;
  Address_not_in?: Maybe<String[] | String>;
  Address_lt?: Maybe<String>;
  Address_lte?: Maybe<String>;
  Address_gt?: Maybe<String>;
  Address_gte?: Maybe<String>;
  Address_contains?: Maybe<String>;
  Address_not_contains?: Maybe<String>;
  Address_starts_with?: Maybe<String>;
  Address_not_starts_with?: Maybe<String>;
  Address_ends_with?: Maybe<String>;
  Address_not_ends_with?: Maybe<String>;
  PhoneNumber?: Maybe<String>;
  PhoneNumber_not?: Maybe<String>;
  PhoneNumber_in?: Maybe<String[] | String>;
  PhoneNumber_not_in?: Maybe<String[] | String>;
  PhoneNumber_lt?: Maybe<String>;
  PhoneNumber_lte?: Maybe<String>;
  PhoneNumber_gt?: Maybe<String>;
  PhoneNumber_gte?: Maybe<String>;
  PhoneNumber_contains?: Maybe<String>;
  PhoneNumber_not_contains?: Maybe<String>;
  PhoneNumber_starts_with?: Maybe<String>;
  PhoneNumber_not_starts_with?: Maybe<String>;
  PhoneNumber_ends_with?: Maybe<String>;
  PhoneNumber_not_ends_with?: Maybe<String>;
  HomeNumber?: Maybe<String>;
  HomeNumber_not?: Maybe<String>;
  HomeNumber_in?: Maybe<String[] | String>;
  HomeNumber_not_in?: Maybe<String[] | String>;
  HomeNumber_lt?: Maybe<String>;
  HomeNumber_lte?: Maybe<String>;
  HomeNumber_gt?: Maybe<String>;
  HomeNumber_gte?: Maybe<String>;
  HomeNumber_contains?: Maybe<String>;
  HomeNumber_not_contains?: Maybe<String>;
  HomeNumber_starts_with?: Maybe<String>;
  HomeNumber_not_starts_with?: Maybe<String>;
  HomeNumber_ends_with?: Maybe<String>;
  HomeNumber_not_ends_with?: Maybe<String>;
  WorkEmail?: Maybe<String>;
  WorkEmail_not?: Maybe<String>;
  WorkEmail_in?: Maybe<String[] | String>;
  WorkEmail_not_in?: Maybe<String[] | String>;
  WorkEmail_lt?: Maybe<String>;
  WorkEmail_lte?: Maybe<String>;
  WorkEmail_gt?: Maybe<String>;
  WorkEmail_gte?: Maybe<String>;
  WorkEmail_contains?: Maybe<String>;
  WorkEmail_not_contains?: Maybe<String>;
  WorkEmail_starts_with?: Maybe<String>;
  WorkEmail_not_starts_with?: Maybe<String>;
  WorkEmail_ends_with?: Maybe<String>;
  WorkEmail_not_ends_with?: Maybe<String>;
  Password?: Maybe<String>;
  Password_not?: Maybe<String>;
  Password_in?: Maybe<String[] | String>;
  Password_not_in?: Maybe<String[] | String>;
  Password_lt?: Maybe<String>;
  Password_lte?: Maybe<String>;
  Password_gt?: Maybe<String>;
  Password_gte?: Maybe<String>;
  Password_contains?: Maybe<String>;
  Password_not_contains?: Maybe<String>;
  Password_starts_with?: Maybe<String>;
  Password_not_starts_with?: Maybe<String>;
  Password_ends_with?: Maybe<String>;
  Password_not_ends_with?: Maybe<String>;
  AND?: Maybe<StaffMemberWhereInput[] | StaffMemberWhereInput>;
  OR?: Maybe<StaffMemberWhereInput[] | StaffMemberWhereInput>;
  NOT?: Maybe<StaffMemberWhereInput[] | StaffMemberWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  reset?: Maybe<String>;
}

export interface PositionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PositionWhereInput>;
  AND?: Maybe<
    PositionSubscriptionWhereInput[] | PositionSubscriptionWhereInput
  >;
  OR?: Maybe<PositionSubscriptionWhereInput[] | PositionSubscriptionWhereInput>;
  NOT?: Maybe<
    PositionSubscriptionWhereInput[] | PositionSubscriptionWhereInput
  >;
}

export interface StaffMemberUpdateManyMutationInput {
  EmployeeName?: Maybe<String>;
  Nic?: Maybe<String>;
  BancAccountNumber?: Maybe<String>;
  Address?: Maybe<String>;
  PhoneNumber?: Maybe<String>;
  HomeNumber?: Maybe<String>;
  WorkEmail?: Maybe<String>;
  Password?: Maybe<String>;
}

export interface DepartmentUpdateDataInput {
  name?: Maybe<String>;
}

export interface CardTemplateWhereInput {
  CardId?: Maybe<ID_Input>;
  CardId_not?: Maybe<ID_Input>;
  CardId_in?: Maybe<ID_Input[] | ID_Input>;
  CardId_not_in?: Maybe<ID_Input[] | ID_Input>;
  CardId_lt?: Maybe<ID_Input>;
  CardId_lte?: Maybe<ID_Input>;
  CardId_gt?: Maybe<ID_Input>;
  CardId_gte?: Maybe<ID_Input>;
  CardId_contains?: Maybe<ID_Input>;
  CardId_not_contains?: Maybe<ID_Input>;
  CardId_starts_with?: Maybe<ID_Input>;
  CardId_not_starts_with?: Maybe<ID_Input>;
  CardId_ends_with?: Maybe<ID_Input>;
  CardId_not_ends_with?: Maybe<ID_Input>;
  CardName?: Maybe<String>;
  CardName_not?: Maybe<String>;
  CardName_in?: Maybe<String[] | String>;
  CardName_not_in?: Maybe<String[] | String>;
  CardName_lt?: Maybe<String>;
  CardName_lte?: Maybe<String>;
  CardName_gt?: Maybe<String>;
  CardName_gte?: Maybe<String>;
  CardName_contains?: Maybe<String>;
  CardName_not_contains?: Maybe<String>;
  CardName_starts_with?: Maybe<String>;
  CardName_not_starts_with?: Maybe<String>;
  CardName_ends_with?: Maybe<String>;
  CardName_not_ends_with?: Maybe<String>;
  Category?: Maybe<String>;
  Category_not?: Maybe<String>;
  Category_in?: Maybe<String[] | String>;
  Category_not_in?: Maybe<String[] | String>;
  Category_lt?: Maybe<String>;
  Category_lte?: Maybe<String>;
  Category_gt?: Maybe<String>;
  Category_gte?: Maybe<String>;
  Category_contains?: Maybe<String>;
  Category_not_contains?: Maybe<String>;
  Category_starts_with?: Maybe<String>;
  Category_not_starts_with?: Maybe<String>;
  Category_ends_with?: Maybe<String>;
  Category_not_ends_with?: Maybe<String>;
  Price?: Maybe<Float>;
  Price_not?: Maybe<Float>;
  Price_in?: Maybe<Float[] | Float>;
  Price_not_in?: Maybe<Float[] | Float>;
  Price_lt?: Maybe<Float>;
  Price_lte?: Maybe<Float>;
  Price_gt?: Maybe<Float>;
  Price_gte?: Maybe<Float>;
  Size?: Maybe<String>;
  Size_not?: Maybe<String>;
  Size_in?: Maybe<String[] | String>;
  Size_not_in?: Maybe<String[] | String>;
  Size_lt?: Maybe<String>;
  Size_lte?: Maybe<String>;
  Size_gt?: Maybe<String>;
  Size_gte?: Maybe<String>;
  Size_contains?: Maybe<String>;
  Size_not_contains?: Maybe<String>;
  Size_starts_with?: Maybe<String>;
  Size_not_starts_with?: Maybe<String>;
  Size_ends_with?: Maybe<String>;
  Size_not_ends_with?: Maybe<String>;
  Material?: Maybe<String>;
  Material_not?: Maybe<String>;
  Material_in?: Maybe<String[] | String>;
  Material_not_in?: Maybe<String[] | String>;
  Material_lt?: Maybe<String>;
  Material_lte?: Maybe<String>;
  Material_gt?: Maybe<String>;
  Material_gte?: Maybe<String>;
  Material_contains?: Maybe<String>;
  Material_not_contains?: Maybe<String>;
  Material_starts_with?: Maybe<String>;
  Material_not_starts_with?: Maybe<String>;
  Material_ends_with?: Maybe<String>;
  Material_not_ends_with?: Maybe<String>;
  SearchTags?: Maybe<String>;
  SearchTags_not?: Maybe<String>;
  SearchTags_in?: Maybe<String[] | String>;
  SearchTags_not_in?: Maybe<String[] | String>;
  SearchTags_lt?: Maybe<String>;
  SearchTags_lte?: Maybe<String>;
  SearchTags_gt?: Maybe<String>;
  SearchTags_gte?: Maybe<String>;
  SearchTags_contains?: Maybe<String>;
  SearchTags_not_contains?: Maybe<String>;
  SearchTags_starts_with?: Maybe<String>;
  SearchTags_not_starts_with?: Maybe<String>;
  SearchTags_ends_with?: Maybe<String>;
  SearchTags_not_ends_with?: Maybe<String>;
  AND?: Maybe<CardTemplateWhereInput[] | CardTemplateWhereInput>;
  OR?: Maybe<CardTemplateWhereInput[] | CardTemplateWhereInput>;
  NOT?: Maybe<CardTemplateWhereInput[] | CardTemplateWhereInput>;
}

export interface DepartmentUpdateOneRequiredInput {
  create?: Maybe<DepartmentCreateInput>;
  update?: Maybe<DepartmentUpdateDataInput>;
  upsert?: Maybe<DepartmentUpsertNestedInput>;
  connect?: Maybe<DepartmentWhereUniqueInput>;
}

export interface PositionUpdateDataInput {
  department?: Maybe<DepartmentUpdateOneRequiredInput>;
  basicSalary?: Maybe<Float>;
  otRate?: Maybe<Float>;
  jobRole?: Maybe<String>;
  contractBasis?: Maybe<Boolean>;
  PerContractPrice?: Maybe<Float>;
}

export interface PositionUpdateInput {
  department?: Maybe<DepartmentUpdateOneRequiredInput>;
  basicSalary?: Maybe<Float>;
  otRate?: Maybe<Float>;
  jobRole?: Maybe<String>;
  contractBasis?: Maybe<Boolean>;
  PerContractPrice?: Maybe<Float>;
}

export type PositionWhereUniqueInput = AtLeastOne<{
  positionId: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface PositionWhereInput {
  positionId?: Maybe<ID_Input>;
  positionId_not?: Maybe<ID_Input>;
  positionId_in?: Maybe<ID_Input[] | ID_Input>;
  positionId_not_in?: Maybe<ID_Input[] | ID_Input>;
  positionId_lt?: Maybe<ID_Input>;
  positionId_lte?: Maybe<ID_Input>;
  positionId_gt?: Maybe<ID_Input>;
  positionId_gte?: Maybe<ID_Input>;
  positionId_contains?: Maybe<ID_Input>;
  positionId_not_contains?: Maybe<ID_Input>;
  positionId_starts_with?: Maybe<ID_Input>;
  positionId_not_starts_with?: Maybe<ID_Input>;
  positionId_ends_with?: Maybe<ID_Input>;
  positionId_not_ends_with?: Maybe<ID_Input>;
  department?: Maybe<DepartmentWhereInput>;
  basicSalary?: Maybe<Float>;
  basicSalary_not?: Maybe<Float>;
  basicSalary_in?: Maybe<Float[] | Float>;
  basicSalary_not_in?: Maybe<Float[] | Float>;
  basicSalary_lt?: Maybe<Float>;
  basicSalary_lte?: Maybe<Float>;
  basicSalary_gt?: Maybe<Float>;
  basicSalary_gte?: Maybe<Float>;
  otRate?: Maybe<Float>;
  otRate_not?: Maybe<Float>;
  otRate_in?: Maybe<Float[] | Float>;
  otRate_not_in?: Maybe<Float[] | Float>;
  otRate_lt?: Maybe<Float>;
  otRate_lte?: Maybe<Float>;
  otRate_gt?: Maybe<Float>;
  otRate_gte?: Maybe<Float>;
  jobRole?: Maybe<String>;
  jobRole_not?: Maybe<String>;
  jobRole_in?: Maybe<String[] | String>;
  jobRole_not_in?: Maybe<String[] | String>;
  jobRole_lt?: Maybe<String>;
  jobRole_lte?: Maybe<String>;
  jobRole_gt?: Maybe<String>;
  jobRole_gte?: Maybe<String>;
  jobRole_contains?: Maybe<String>;
  jobRole_not_contains?: Maybe<String>;
  jobRole_starts_with?: Maybe<String>;
  jobRole_not_starts_with?: Maybe<String>;
  jobRole_ends_with?: Maybe<String>;
  jobRole_not_ends_with?: Maybe<String>;
  contractBasis?: Maybe<Boolean>;
  contractBasis_not?: Maybe<Boolean>;
  PerContractPrice?: Maybe<Float>;
  PerContractPrice_not?: Maybe<Float>;
  PerContractPrice_in?: Maybe<Float[] | Float>;
  PerContractPrice_not_in?: Maybe<Float[] | Float>;
  PerContractPrice_lt?: Maybe<Float>;
  PerContractPrice_lte?: Maybe<Float>;
  PerContractPrice_gt?: Maybe<Float>;
  PerContractPrice_gte?: Maybe<Float>;
  AND?: Maybe<PositionWhereInput[] | PositionWhereInput>;
  OR?: Maybe<PositionWhereInput[] | PositionWhereInput>;
  NOT?: Maybe<PositionWhereInput[] | PositionWhereInput>;
}

export interface DepartmentCreateOneInput {
  create?: Maybe<DepartmentCreateInput>;
  connect?: Maybe<DepartmentWhereUniqueInput>;
}

export interface PositionCreateOneInput {
  create?: Maybe<PositionCreateInput>;
  connect?: Maybe<PositionWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  reset?: Maybe<String>;
  reset_not?: Maybe<String>;
  reset_in?: Maybe<String[] | String>;
  reset_not_in?: Maybe<String[] | String>;
  reset_lt?: Maybe<String>;
  reset_lte?: Maybe<String>;
  reset_gt?: Maybe<String>;
  reset_gte?: Maybe<String>;
  reset_contains?: Maybe<String>;
  reset_not_contains?: Maybe<String>;
  reset_starts_with?: Maybe<String>;
  reset_not_starts_with?: Maybe<String>;
  reset_ends_with?: Maybe<String>;
  reset_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CardTemplateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CardTemplateWhereInput>;
  AND?: Maybe<
    CardTemplateSubscriptionWhereInput[] | CardTemplateSubscriptionWhereInput
  >;
  OR?: Maybe<
    CardTemplateSubscriptionWhereInput[] | CardTemplateSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CardTemplateSubscriptionWhereInput[] | CardTemplateSubscriptionWhereInput
  >;
}

export interface StaffMemberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StaffMemberWhereInput>;
  AND?: Maybe<
    StaffMemberSubscriptionWhereInput[] | StaffMemberSubscriptionWhereInput
  >;
  OR?: Maybe<
    StaffMemberSubscriptionWhereInput[] | StaffMemberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    StaffMemberSubscriptionWhereInput[] | StaffMemberSubscriptionWhereInput
  >;
}

export type DepartmentWhereUniqueInput = AtLeastOne<{
  departmentID: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface PositionCreateInput {
  positionId?: Maybe<ID_Input>;
  department: DepartmentCreateOneInput;
  basicSalary?: Maybe<Float>;
  otRate?: Maybe<Float>;
  jobRole?: Maybe<String>;
  contractBasis?: Maybe<Boolean>;
  PerContractPrice?: Maybe<Float>;
}

export interface PositionUpsertNestedInput {
  update: PositionUpdateDataInput;
  create: PositionCreateInput;
}

export interface DepartmentUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface StaffMemberUpdateInput {
  EmployeeName?: Maybe<String>;
  Nic?: Maybe<String>;
  BancAccountNumber?: Maybe<String>;
  Position?: Maybe<PositionUpdateOneInput>;
  Address?: Maybe<String>;
  PhoneNumber?: Maybe<String>;
  HomeNumber?: Maybe<String>;
  WorkEmail?: Maybe<String>;
  Password?: Maybe<String>;
}

export interface StaffMemberCreateInput {
  EmployeeId?: Maybe<ID_Input>;
  EmployeeName?: Maybe<String>;
  Nic?: Maybe<String>;
  BancAccountNumber?: Maybe<String>;
  Position?: Maybe<PositionCreateOneInput>;
  Address?: Maybe<String>;
  PhoneNumber?: Maybe<String>;
  HomeNumber?: Maybe<String>;
  WorkEmail?: Maybe<String>;
  Password?: Maybe<String>;
}

export interface CardTemplateUpdateInput {
  CardName?: Maybe<String>;
  Category?: Maybe<String>;
  Price?: Maybe<Float>;
  Size?: Maybe<String>;
  Material?: Maybe<String>;
  SearchTags?: Maybe<String>;
}

export interface CardTemplateCreateInput {
  CardId?: Maybe<ID_Input>;
  CardName?: Maybe<String>;
  Category?: Maybe<String>;
  Price?: Maybe<Float>;
  Size?: Maybe<String>;
  Material?: Maybe<String>;
  SearchTags?: Maybe<String>;
}

export interface DepartmentCreateInput {
  departmentID?: Maybe<ID_Input>;
  name: String;
}

export interface DepartmentUpdateInput {
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  reset?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface PositionUpdateOneInput {
  create?: Maybe<PositionCreateInput>;
  update?: Maybe<PositionUpdateDataInput>;
  upsert?: Maybe<PositionUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PositionWhereUniqueInput>;
}

export interface DepartmentWhereInput {
  departmentID?: Maybe<ID_Input>;
  departmentID_not?: Maybe<ID_Input>;
  departmentID_in?: Maybe<ID_Input[] | ID_Input>;
  departmentID_not_in?: Maybe<ID_Input[] | ID_Input>;
  departmentID_lt?: Maybe<ID_Input>;
  departmentID_lte?: Maybe<ID_Input>;
  departmentID_gt?: Maybe<ID_Input>;
  departmentID_gte?: Maybe<ID_Input>;
  departmentID_contains?: Maybe<ID_Input>;
  departmentID_not_contains?: Maybe<ID_Input>;
  departmentID_starts_with?: Maybe<ID_Input>;
  departmentID_not_starts_with?: Maybe<ID_Input>;
  departmentID_ends_with?: Maybe<ID_Input>;
  departmentID_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<DepartmentWhereInput[] | DepartmentWhereInput>;
  OR?: Maybe<DepartmentWhereInput[] | DepartmentWhereInput>;
  NOT?: Maybe<DepartmentWhereInput[] | DepartmentWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateCardTemplate {
  count: Int;
}

export interface AggregateCardTemplatePromise
  extends Promise<AggregateCardTemplate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCardTemplateSubscription
  extends Promise<AsyncIterator<AggregateCardTemplate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  reset?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  reset: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  reset: () => Promise<AsyncIterator<String>>;
}

export interface CardTemplateEdge {
  node: CardTemplate;
  cursor: String;
}

export interface CardTemplateEdgePromise
  extends Promise<CardTemplateEdge>,
    Fragmentable {
  node: <T = CardTemplatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CardTemplateEdgeSubscription
  extends Promise<AsyncIterator<CardTemplateEdge>>,
    Fragmentable {
  node: <T = CardTemplateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CardTemplate {
  CardId: ID_Output;
  CardName?: String;
  Category?: String;
  Price?: Float;
  Size?: String;
  Material?: String;
  SearchTags?: String;
}

export interface CardTemplatePromise
  extends Promise<CardTemplate>,
    Fragmentable {
  CardId: () => Promise<ID_Output>;
  CardName: () => Promise<String>;
  Category: () => Promise<String>;
  Price: () => Promise<Float>;
  Size: () => Promise<String>;
  Material: () => Promise<String>;
  SearchTags: () => Promise<String>;
}

export interface CardTemplateSubscription
  extends Promise<AsyncIterator<CardTemplate>>,
    Fragmentable {
  CardId: () => Promise<AsyncIterator<ID_Output>>;
  CardName: () => Promise<AsyncIterator<String>>;
  Category: () => Promise<AsyncIterator<String>>;
  Price: () => Promise<AsyncIterator<Float>>;
  Size: () => Promise<AsyncIterator<String>>;
  Material: () => Promise<AsyncIterator<String>>;
  SearchTags: () => Promise<AsyncIterator<String>>;
}

export interface CardTemplateNullablePromise
  extends Promise<CardTemplate | null>,
    Fragmentable {
  CardId: () => Promise<ID_Output>;
  CardName: () => Promise<String>;
  Category: () => Promise<String>;
  Price: () => Promise<Float>;
  Size: () => Promise<String>;
  Material: () => Promise<String>;
  SearchTags: () => Promise<String>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateStaffMember {
  count: Int;
}

export interface AggregateStaffMemberPromise
  extends Promise<AggregateStaffMember>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStaffMemberSubscription
  extends Promise<AsyncIterator<AggregateStaffMember>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface StaffMemberConnection {
  pageInfo: PageInfo;
  edges: StaffMemberEdge[];
}

export interface StaffMemberConnectionPromise
  extends Promise<StaffMemberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StaffMemberEdge>>() => T;
  aggregate: <T = AggregateStaffMemberPromise>() => T;
}

export interface StaffMemberConnectionSubscription
  extends Promise<AsyncIterator<StaffMemberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StaffMemberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStaffMemberSubscription>() => T;
}

export interface CardTemplateConnection {
  pageInfo: PageInfo;
  edges: CardTemplateEdge[];
}

export interface CardTemplateConnectionPromise
  extends Promise<CardTemplateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CardTemplateEdge>>() => T;
  aggregate: <T = AggregateCardTemplatePromise>() => T;
}

export interface CardTemplateConnectionSubscription
  extends Promise<AsyncIterator<CardTemplateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CardTemplateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCardTemplateSubscription>() => T;
}

export interface AggregatePosition {
  count: Int;
}

export interface AggregatePositionPromise
  extends Promise<AggregatePosition>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePositionSubscription
  extends Promise<AsyncIterator<AggregatePosition>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CardTemplateSubscriptionPayload {
  mutation: MutationType;
  node: CardTemplate;
  updatedFields: String[];
  previousValues: CardTemplatePreviousValues;
}

export interface CardTemplateSubscriptionPayloadPromise
  extends Promise<CardTemplateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CardTemplatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CardTemplatePreviousValuesPromise>() => T;
}

export interface CardTemplateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CardTemplateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CardTemplateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CardTemplatePreviousValuesSubscription>() => T;
}

export interface PositionConnection {
  pageInfo: PageInfo;
  edges: PositionEdge[];
}

export interface PositionConnectionPromise
  extends Promise<PositionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PositionEdge>>() => T;
  aggregate: <T = AggregatePositionPromise>() => T;
}

export interface PositionConnectionSubscription
  extends Promise<AsyncIterator<PositionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PositionEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePositionSubscription>() => T;
}

export interface CardTemplatePreviousValues {
  CardId: ID_Output;
  CardName?: String;
  Category?: String;
  Price?: Float;
  Size?: String;
  Material?: String;
  SearchTags?: String;
}

export interface CardTemplatePreviousValuesPromise
  extends Promise<CardTemplatePreviousValues>,
    Fragmentable {
  CardId: () => Promise<ID_Output>;
  CardName: () => Promise<String>;
  Category: () => Promise<String>;
  Price: () => Promise<Float>;
  Size: () => Promise<String>;
  Material: () => Promise<String>;
  SearchTags: () => Promise<String>;
}

export interface CardTemplatePreviousValuesSubscription
  extends Promise<AsyncIterator<CardTemplatePreviousValues>>,
    Fragmentable {
  CardId: () => Promise<AsyncIterator<ID_Output>>;
  CardName: () => Promise<AsyncIterator<String>>;
  Category: () => Promise<AsyncIterator<String>>;
  Price: () => Promise<AsyncIterator<Float>>;
  Size: () => Promise<AsyncIterator<String>>;
  Material: () => Promise<AsyncIterator<String>>;
  SearchTags: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDepartment {
  count: Int;
}

export interface AggregateDepartmentPromise
  extends Promise<AggregateDepartment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDepartmentSubscription
  extends Promise<AsyncIterator<AggregateDepartment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StaffMemberPreviousValues {
  EmployeeId: ID_Output;
  EmployeeName?: String;
  Nic?: String;
  BancAccountNumber?: String;
  Address?: String;
  PhoneNumber?: String;
  HomeNumber?: String;
  WorkEmail?: String;
  Password?: String;
}

export interface StaffMemberPreviousValuesPromise
  extends Promise<StaffMemberPreviousValues>,
    Fragmentable {
  EmployeeId: () => Promise<ID_Output>;
  EmployeeName: () => Promise<String>;
  Nic: () => Promise<String>;
  BancAccountNumber: () => Promise<String>;
  Address: () => Promise<String>;
  PhoneNumber: () => Promise<String>;
  HomeNumber: () => Promise<String>;
  WorkEmail: () => Promise<String>;
  Password: () => Promise<String>;
}

export interface StaffMemberPreviousValuesSubscription
  extends Promise<AsyncIterator<StaffMemberPreviousValues>>,
    Fragmentable {
  EmployeeId: () => Promise<AsyncIterator<ID_Output>>;
  EmployeeName: () => Promise<AsyncIterator<String>>;
  Nic: () => Promise<AsyncIterator<String>>;
  BancAccountNumber: () => Promise<AsyncIterator<String>>;
  Address: () => Promise<AsyncIterator<String>>;
  PhoneNumber: () => Promise<AsyncIterator<String>>;
  HomeNumber: () => Promise<AsyncIterator<String>>;
  WorkEmail: () => Promise<AsyncIterator<String>>;
  Password: () => Promise<AsyncIterator<String>>;
}

export interface DepartmentConnection {
  pageInfo: PageInfo;
  edges: DepartmentEdge[];
}

export interface DepartmentConnectionPromise
  extends Promise<DepartmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DepartmentEdge>>() => T;
  aggregate: <T = AggregateDepartmentPromise>() => T;
}

export interface DepartmentConnectionSubscription
  extends Promise<AsyncIterator<DepartmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DepartmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDepartmentSubscription>() => T;
}

export interface DepartmentSubscriptionPayload {
  mutation: MutationType;
  node: Department;
  updatedFields: String[];
  previousValues: DepartmentPreviousValues;
}

export interface DepartmentSubscriptionPayloadPromise
  extends Promise<DepartmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DepartmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DepartmentPreviousValuesPromise>() => T;
}

export interface DepartmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DepartmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DepartmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DepartmentPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  reset?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  reset: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  reset: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  reset: () => Promise<String>;
}

export interface StaffMember {
  EmployeeId: ID_Output;
  EmployeeName?: String;
  Nic?: String;
  BancAccountNumber?: String;
  Address?: String;
  PhoneNumber?: String;
  HomeNumber?: String;
  WorkEmail?: String;
  Password?: String;
}

export interface StaffMemberPromise extends Promise<StaffMember>, Fragmentable {
  EmployeeId: () => Promise<ID_Output>;
  EmployeeName: () => Promise<String>;
  Nic: () => Promise<String>;
  BancAccountNumber: () => Promise<String>;
  Position: <T = PositionPromise>() => T;
  Address: () => Promise<String>;
  PhoneNumber: () => Promise<String>;
  HomeNumber: () => Promise<String>;
  WorkEmail: () => Promise<String>;
  Password: () => Promise<String>;
}

export interface StaffMemberSubscription
  extends Promise<AsyncIterator<StaffMember>>,
    Fragmentable {
  EmployeeId: () => Promise<AsyncIterator<ID_Output>>;
  EmployeeName: () => Promise<AsyncIterator<String>>;
  Nic: () => Promise<AsyncIterator<String>>;
  BancAccountNumber: () => Promise<AsyncIterator<String>>;
  Position: <T = PositionSubscription>() => T;
  Address: () => Promise<AsyncIterator<String>>;
  PhoneNumber: () => Promise<AsyncIterator<String>>;
  HomeNumber: () => Promise<AsyncIterator<String>>;
  WorkEmail: () => Promise<AsyncIterator<String>>;
  Password: () => Promise<AsyncIterator<String>>;
}

export interface StaffMemberNullablePromise
  extends Promise<StaffMember | null>,
    Fragmentable {
  EmployeeId: () => Promise<ID_Output>;
  EmployeeName: () => Promise<String>;
  Nic: () => Promise<String>;
  BancAccountNumber: () => Promise<String>;
  Position: <T = PositionPromise>() => T;
  Address: () => Promise<String>;
  PhoneNumber: () => Promise<String>;
  HomeNumber: () => Promise<String>;
  WorkEmail: () => Promise<String>;
  Password: () => Promise<String>;
}

export interface PositionPreviousValues {
  positionId: ID_Output;
  basicSalary?: Float;
  otRate?: Float;
  jobRole?: String;
  contractBasis?: Boolean;
  PerContractPrice?: Float;
}

export interface PositionPreviousValuesPromise
  extends Promise<PositionPreviousValues>,
    Fragmentable {
  positionId: () => Promise<ID_Output>;
  basicSalary: () => Promise<Float>;
  otRate: () => Promise<Float>;
  jobRole: () => Promise<String>;
  contractBasis: () => Promise<Boolean>;
  PerContractPrice: () => Promise<Float>;
}

export interface PositionPreviousValuesSubscription
  extends Promise<AsyncIterator<PositionPreviousValues>>,
    Fragmentable {
  positionId: () => Promise<AsyncIterator<ID_Output>>;
  basicSalary: () => Promise<AsyncIterator<Float>>;
  otRate: () => Promise<AsyncIterator<Float>>;
  jobRole: () => Promise<AsyncIterator<String>>;
  contractBasis: () => Promise<AsyncIterator<Boolean>>;
  PerContractPrice: () => Promise<AsyncIterator<Float>>;
}

export interface PositionSubscriptionPayload {
  mutation: MutationType;
  node: Position;
  updatedFields: String[];
  previousValues: PositionPreviousValues;
}

export interface PositionSubscriptionPayloadPromise
  extends Promise<PositionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PositionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PositionPreviousValuesPromise>() => T;
}

export interface PositionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PositionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PositionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PositionPreviousValuesSubscription>() => T;
}

export interface StaffMemberSubscriptionPayload {
  mutation: MutationType;
  node: StaffMember;
  updatedFields: String[];
  previousValues: StaffMemberPreviousValues;
}

export interface StaffMemberSubscriptionPayloadPromise
  extends Promise<StaffMemberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StaffMemberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StaffMemberPreviousValuesPromise>() => T;
}

export interface StaffMemberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StaffMemberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StaffMemberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StaffMemberPreviousValuesSubscription>() => T;
}

export interface DepartmentPreviousValues {
  departmentID: ID_Output;
  name: String;
}

export interface DepartmentPreviousValuesPromise
  extends Promise<DepartmentPreviousValues>,
    Fragmentable {
  departmentID: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DepartmentPreviousValuesSubscription
  extends Promise<AsyncIterator<DepartmentPreviousValues>>,
    Fragmentable {
  departmentID: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PositionEdge {
  node: Position;
  cursor: String;
}

export interface PositionEdgePromise
  extends Promise<PositionEdge>,
    Fragmentable {
  node: <T = PositionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PositionEdgeSubscription
  extends Promise<AsyncIterator<PositionEdge>>,
    Fragmentable {
  node: <T = PositionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StaffMemberEdge {
  node: StaffMember;
  cursor: String;
}

export interface StaffMemberEdgePromise
  extends Promise<StaffMemberEdge>,
    Fragmentable {
  node: <T = StaffMemberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StaffMemberEdgeSubscription
  extends Promise<AsyncIterator<StaffMemberEdge>>,
    Fragmentable {
  node: <T = StaffMemberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Department {
  departmentID: ID_Output;
  name: String;
}

export interface DepartmentPromise extends Promise<Department>, Fragmentable {
  departmentID: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DepartmentSubscription
  extends Promise<AsyncIterator<Department>>,
    Fragmentable {
  departmentID: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface DepartmentNullablePromise
  extends Promise<Department | null>,
    Fragmentable {
  departmentID: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DepartmentEdge {
  node: Department;
  cursor: String;
}

export interface DepartmentEdgePromise
  extends Promise<DepartmentEdge>,
    Fragmentable {
  node: <T = DepartmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DepartmentEdgeSubscription
  extends Promise<AsyncIterator<DepartmentEdge>>,
    Fragmentable {
  node: <T = DepartmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Position {
  positionId: ID_Output;
  basicSalary?: Float;
  otRate?: Float;
  jobRole?: String;
  contractBasis?: Boolean;
  PerContractPrice?: Float;
}

export interface PositionPromise extends Promise<Position>, Fragmentable {
  positionId: () => Promise<ID_Output>;
  department: <T = DepartmentPromise>() => T;
  basicSalary: () => Promise<Float>;
  otRate: () => Promise<Float>;
  jobRole: () => Promise<String>;
  contractBasis: () => Promise<Boolean>;
  PerContractPrice: () => Promise<Float>;
}

export interface PositionSubscription
  extends Promise<AsyncIterator<Position>>,
    Fragmentable {
  positionId: () => Promise<AsyncIterator<ID_Output>>;
  department: <T = DepartmentSubscription>() => T;
  basicSalary: () => Promise<AsyncIterator<Float>>;
  otRate: () => Promise<AsyncIterator<Float>>;
  jobRole: () => Promise<AsyncIterator<String>>;
  contractBasis: () => Promise<AsyncIterator<Boolean>>;
  PerContractPrice: () => Promise<AsyncIterator<Float>>;
}

export interface PositionNullablePromise
  extends Promise<Position | null>,
    Fragmentable {
  positionId: () => Promise<ID_Output>;
  department: <T = DepartmentPromise>() => T;
  basicSalary: () => Promise<Float>;
  otRate: () => Promise<Float>;
  jobRole: () => Promise<String>;
  contractBasis: () => Promise<Boolean>;
  PerContractPrice: () => Promise<Float>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Department",
    embedded: false
  },
  {
    name: "Position",
    embedded: false
  },
  {
    name: "StaffMember",
    embedded: false
  },
  {
    name: "CardTemplate",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
